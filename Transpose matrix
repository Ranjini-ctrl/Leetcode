**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** transpose(int** matrix, int matrixSize, int* matrixColSize, int* returnSize, int** returnColumnSizes) {
    // Set the size of the transposed matrix
    *returnSize = *matrixColSize;
    
    // Allocate memory for returnColumnSizes and set the number of columns per row in the transposed matrix
    *returnColumnSizes = malloc(*returnSize * sizeof(int));
    for (int i = 0; i < *returnSize; i++) {
        (*returnColumnSizes)[i] = matrixSize; // Each row in transposed matrix has 'matrixSize' columns
    }

    // Allocate memory for the transposed matrix
    int** transposedMatrix = malloc(*returnSize * sizeof(int*));
    for (int i = 0; i < *returnSize; i++) {
        transposedMatrix[i] = malloc(matrixSize * sizeof(int));
    }

    // Transpose the matrix
    for (int i = 0; i < matrixSize; i++) {
        for (int j = 0; j < *matrixColSize; j++) {
            transposedMatrix[j][i] = matrix[i][j];
        }
    }

    return transposedMatrix;
}
